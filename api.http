# MockServer API Examples
# Default port: 1080 (compatible with original MockServer)
# You can change the port by setting the PORT environment variable

### Dodaj oczekiwanie dla GET /api/data
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/data"
    },
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Dane pobrane pomyślnie",
            "data": [1, 2, 3, 4, 5]
        }
    }
}

### Testowe zapytanie do GET /api/data
GET http://localhost:1080/api/data

###

### Dodaj oczekiwanie dla POST /api/data
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "body": {
            "type": "json",
            "value": {
                "value": "test"
            }
        }
    },
    "httpResponse": {
        "status": 201,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Dane zapisane pomyślnie",
            "id": "123"
        }
    }
}

### Testowe zapytanie do POST /api/data
POST http://localhost:1080/api/data
Content-Type: application/json

{
    "value": "test"
}

###

### Dodaj oczekiwanie dla GET /api/data z parametrami query
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/data",
        "query": {
            "filter": "active"
        }
    },
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Filtrowane dane",
            "data": ["active1", "active2"]
        }
    }
}

### Testowe zapytanie do GET /api/data z parametrem query
GET http://localhost:1080/api/data?filter=active

###

### Dodaj oczekiwanie dla GET /api/data z nagłówkami
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/data",
        "headers": {
            "X-API-Key": "secret123"
        }
    },
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Dane dostępne tylko z kluczem API",
            "data": ["secret1", "secret2"]
        }
    }
}

### Testowe zapytanie do GET /api/data z nagłówkiem
GET http://localhost:1080/api/data
X-API-Key: secret123

###

### Dodaj oczekiwanie z dopasowaniem JSON
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "body": {
            "type": "json",
            "value": {
                "name": "test",
                "value": 123
            }
        }
    },
    "httpResponse": {
        "status": 200,
        "body": { "success": true }
    }
}

### Testowe zapytanie do POST /api/data z dopasowaniem JSON
POST http://localhost:1080/api/data
Content-Type: application/json

{
    "name": "test",
    "value": 123
}

###

### Dodaj oczekiwanie z dopasowaniem JSONPath
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "body": {
            "type": "jsonPath",
            "value": "$.name"
        }
    },
    "httpResponse": {
        "status": 200,
        "body": { "success": true }
    }
}

### Testowe zapytanie do POST /api/data z dopasowaniem JSONPath
POST http://localhost:1080/api/data
Content-Type: application/json

{
    "name": "testPath",
    "otherField": "value"
}

###

### Dodaj oczekiwanie z dopasowaniem String
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "body": {
            "type": "string",
            "value": "test"
        }
    },
    "httpResponse": {
        "status": 200,
        "body": { "success": true }
    }
}

### Testowe zapytanie do POST /api/data z dopasowaniem String
POST http://localhost:1080/api/data
Content-Type: text/plain

test

###

### Dodaj oczekiwanie z dopasowaniem STRICT
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "matchType": "strict",
        "body": {
            "type": "json",
            "value": {
                "name": "test",
                "age": 30
            }
        }
    },
    "httpResponse": {
        "status": 200,
        "body": { "matched": "strict" }
    }
}

### Testowe zapytanie do POST /api/data z dopasowaniem STRICT
POST http://localhost:1080/api/data
Content-Type: application/json

{
    "name": "test",
    "age": 30
}

###

### Dodaj oczekiwanie z dopasowaniem ONLY_MATCHING_FIELDS
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/data",
        "matchType": "onlyMatchingFields",
        "body": {
            "type": "json",
            "value": {
                "name": "test"
            }
        }
    },
    "httpResponse": {
        "status": 200,
        "body": { "matched": "onlyMatchingFields" }
    }
}

### Testowe zapytanie do POST /api/data z dopasowaniem ONLY_MATCHING_FIELDS
POST http://localhost:1080/api/data
Content-Type: application/json

{
    "name": "test",
    "extra": "field",
    "another": 123
}

###

### Dodaj oczekiwanie z JSONUnit placeholders (ignorowanie pola)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/user",
        "body": {
            "type": "json",
            "value": {
                "name": "Jan Kowalski",
                "age": "${json-unit.any-number}",
                "email": "${json-unit.any-string}",
                "metadata": "${json-unit.ignore}"
            }
        }
    },
    "httpResponse": {
        "status": 201,
        "body": { "message": "Użytkownik utworzony" }
    }
}

### Testowe zapytanie do POST /api/user z JSONUnit placeholders (ignorowanie pola)
POST http://localhost:1080/api/user
Content-Type: application/json

{
    "name": "Jan Kowalski",
    "age": 30,
    "email": "jan@example.com",
    "metadata": {
        "lastLogin": "2023-01-01",
        "preferences": {
            "theme": "dark"
        }
    }
}

###

### Dodaj oczekiwanie z JSONUnit placeholders (sprawdzanie typów)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "POST",
        "path": "/api/order",
        "body": {
            "type": "json",
            "value": {
                "id": "${json-unit.any-string}",
                "items": "${json-unit.any-array}",
                "customer": "${json-unit.any-object}",
                "isPaid": "${json-unit.any-boolean}"
            }
        }
    },
    "httpResponse": {
        "status": 201,
        "body": { "message": "Zamówienie utworzone" }
    }
}

### Testowe zapytanie do POST /api/order z JSONUnit placeholders (sprawdzanie typów)
POST http://localhost:1080/api/order
Content-Type: application/json

{
    "id": "ORD-12345",
    "items": [
        { "productId": "P1", "quantity": 2 },
        { "productId": "P2", "quantity": 1 }
    ],
    "customer": {
        "id": "C1",
        "name": "Jan Kowalski"
    },
    "isPaid": true
}

###

### Przykład w formacie MockServer (statusCode)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/mockserver"
    },
    "httpResponse": {
        "statusCode": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Format zgodny z MockServer"
        }
    }
}

### Testowe zapytanie do GET /api/mockserver
GET http://localhost:1080/api/mockserver

###

### Przykład w formacie MockServer (queryStringParameters)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/mockserver",
        "queryStringParameters": {
            "param": "value"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Format zgodny z MockServer - queryStringParameters"
        }
    }
}

### Testowe zapytanie do GET /api/mockserver z queryStringParameters
GET http://localhost:1080/api/mockserver?param=value

###

### Przykład w formacie MockServer (json zamiast value)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/mockserver",
        "body": {
            "type": "json",
            "json": {
                "name": "test"
            }
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Format zgodny z MockServer - json"
        }
    }
}

### Testowe zapytanie do POST /api/mockserver (json)
POST http://localhost:1080/api/mockserver
Content-Type: application/json

{
    "name": "test"
}

###

### Przykład w formacie MockServer (jsonPath zamiast value)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/mockserver",
        "body": {
            "type": "jsonPath",
            "jsonPath": "$.name"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Format zgodny z MockServer - jsonPath"
        }
    }
}

### Testowe zapytanie do POST /api/mockserver (jsonPath)
POST http://localhost:1080/api/mockserver
Content-Type: application/json

{
    "name": "testJsonPath"
}

###

### Przykład w formacie MockServer (string zamiast value)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/mockserver",
        "body": {
            "type": "string",
            "string": "test"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Format zgodny z MockServer - string"
        }
    }
}

### Testowe zapytanie do POST /api/mockserver (string)
POST http://localhost:1080/api/mockserver
Content-Type: text/plain

test

###

### Pobierz wszystkie oczekiwania
GET http://localhost:1080/mockserver/expectation

### Pobierz wszystkie aktywne oczekiwania
GET http://localhost:1080/mockserver/expectation/active

### Pobierz konkretne oczekiwanie
GET http://localhost:1080/mockserver/expectation/1

### Usuń konkretne oczekiwanie
DELETE http://localhost:1080/mockserver/expectation/1

### Wyczyść wszystkie oczekiwania (reset)
PUT http://localhost:1080/mockserver/reset

### Dodaj oczekiwanie z negacją nagłówka (not)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/not",
        "headers": {
            "not": true,
            "X-Test-Header": "test-value"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano żądanie BEZ nagłówka X-Test-Header"
        }
    }
}

### Testowe zapytanie BEZ negowanego nagłówka (powinno dopasować)
GET http://localhost:1080/api/not

###

### Testowe zapytanie Z negowanym nagłówkiem (nie powinno dopasować)
GET http://localhost:1080/api/not
X-Test-Header: test-value

###

### Dodaj oczekiwanie z negacją parametru query (not)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/not-query",
        "queryStringParameters": {
            "not": true,
            "test": "value"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano żądanie BEZ parametru query test=value"
        }
    }
}

### Testowe zapytanie BEZ negowanego parametru (powinno dopasować)
GET http://localhost:1080/api/not-query

###

### Testowe zapytanie Z negowanym parametrem (nie powinno dopasować)
GET http://localhost:1080/api/not-query?test=value

###

### Dodaj oczekiwanie z negacją body (not)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/not-body",
        "body": {
            "not": true,
            "type": "json",
            "json": {
                "test": "value"
            }
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano żądanie BEZ ciała zawierającego test=value"
        }
    }
}

### Testowe zapytanie Z innym body (powinno dopasować)
POST http://localhost:1080/api/not-body
Content-Type: application/json

{
    "otherField": "otherValue"
}

###

### Testowe zapytanie Z negowanym body (nie powinno dopasować)
POST http://localhost:1080/api/not-body
Content-Type: application/json

{
    "test": "value"
}

###

### Dodaj oczekiwanie z negacją metody (not)
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": {
            "not": true,
            "value": "POST"
        },
        "path": "/api/not-method"
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano każdą metodę OPRÓCZ POST"
        }
    }
}

### Testowe zapytanie z metodą GET (powinno dopasować)
GET http://localhost:1080/api/not-method

###

### Testowe zapytanie z metodą POST (nie powinno dopasować)
POST http://localhost:1080/api/not-method

###

### Dodaj oczekiwanie z dopasowaniem REGEX
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/regex",
        "body": {
            "type": "regex",
            "regex": "user_\\d+"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano przez wyrażenie regularne"
        }
    }
}

### Testowe zapytanie do POST /api/regex (dopasowanie RegEx)
POST http://localhost:1080/api/regex
Content-Type: text/plain

user_12345

###

### Dodaj oczekiwanie z dopasowaniem XPATH
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "POST",
        "path": "/api/xpath",
        "body": {
            "type": "xpath",
            "xpath": "//user[@id='123']"
        }
    },
    "httpResponse": {
        "statusCode": 200,
        "body": {
            "message": "Dopasowano przez XPath"
        }
    }
}

### Testowe zapytanie do POST /api/xpath (dopasowanie XPath)
POST http://localhost:1080/api/xpath
Content-Type: application/xml

<root>
  <user id="123">
    <name>Jan Kowalski</name>
    <email>jan@example.com</email>
  </user>
</root>

###

### Dodaj oczekiwanie z opóźnieniem (delay) w odpowiedzi - prosty format
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/delay/simple"
    },
    "httpResponse": {
        "statusCode": 200,
        "delay": 1000,
        "body": {
            "message": "Odpowiedź z opóźnieniem 1 sekundy (prosty format)"
        }
    }
}

### Testowe zapytanie do GET /api/delay/simple
GET http://localhost:1080/api/delay/simple

###

### Dodaj oczekiwanie z opóźnieniem (delay) w odpowiedzi - format MockServer
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "httpRequest": {
        "method": "GET",
        "path": "/api/delay/mockserver"
    },
    "httpResponse": {
        "statusCode": 200,
        "delay": {
            "timeUnit": "MILLISECONDS",
            "value": 1500
        },
        "body": {
            "message": "Odpowiedź z opóźnieniem 1.5 sekundy (format MockServer)"
        }
    }
}

### Testowe zapytanie do GET /api/delay/mockserver
GET http://localhost:1080/api/delay/mockserver

###

### Dodanie nowego oczekiwania z akcją forward

POST http://localhost:3000/mockserver/expectation
Content-Type: application/json

{
  "httpRequest": {
    "method": "GET",
    "path": "/api/forward-example"
  },
  "httpForward": {
    "host": "jsonplaceholder.typicode.com",
    "port": 443,
    "scheme": "HTTPS"
  }
}

### Wywołanie przekierowanego żądania (będzie przekazane do jsonplaceholder.typicode.com)
GET http://localhost:3000/api/forward-example

### Dodanie nowego oczekiwania z akcją forward i opóźnieniem

POST http://localhost:3000/mockserver/expectation
Content-Type: application/json

{
  "httpRequest": {
    "method": "GET",
    "path": "/api/forward-with-delay"
  },
  "httpForward": {
    "host": "jsonplaceholder.typicode.com",
    "port": 443,
    "scheme": "HTTPS",
    "delay": 1000
  }
}

### Wywołanie przekierowanego żądania z opóźnieniem
GET http://localhost:3000/api/forward-with-delay

### Dodaj oczekiwanie z wildcard w ścieżce
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/users/*"
    },
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Dopasowano użytkownika za pomocą wzorca wildcard",
            "matched": true
        }
    }
}

### Testowe zapytanie pasujące do wzorca wildcard
GET http://localhost:1080/api/users/123

### Testowe zapytanie pasujące do wzorca wildcard (inny identyfikator)
GET http://localhost:1080/api/users/abc

###

### Dodaj oczekiwanie z wieloma wildcard w ścieżce
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/*/items/*"
    },
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Dopasowano za pomocą złożonego wzorca wildcard",
            "matched": true
        }
    }
}

### Testowe zapytanie pasujące do złożonego wzorca wildcard
GET http://localhost:1080/api/categories/items/123

###

### Dodaj oczekiwanie z niskim priorytetem
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/priority"
    },
    "priority": 0,
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Odpowiedź z oczekiwania o niskim priorytecie (0)",
            "priority": "low"
        }
    }
}

### Dodaj oczekiwanie z wysokim priorytetem
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/priority"
    },
    "priority": 100,
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Odpowiedź z oczekiwania o wysokim priorytecie (100)",
            "priority": "high"
        }
    }
}

### Dodaj oczekiwanie ze średnim priorytetem
PUT http://localhost:1080/mockserver/expectation
Content-Type: application/json

{
    "type": "http",
    "httpRequest": {
        "method": "GET",
        "path": "/api/priority"
    },
    "priority": 50,
    "httpResponse": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": {
            "message": "Odpowiedź z oczekiwania o średnim priorytecie (50)",
            "priority": "medium"
        }
    }
}

### Testowe zapytanie do endpointu z wieloma oczekiwaniami o różnych priorytetach
### Ta odpowiedź powinna pochodzić z oczekiwania o najwyższym priorytecie (100)
GET http://localhost:1080/api/priority
